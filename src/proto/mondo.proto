// mondo.proto
//
syntax = "proto3";

// As per the google style guide:
//
// https://developers.google.com/protocol-buffers/docs/style
//
// use 2-space indentation
// use CamelCase for message names
// use lower_snake_case for field names
// use pluralized names for repeated fields
// use CamelCase for enum type names and ALL_CAPS for enum values
// use CamelCase for service names and also for service methods

package mondo;

// This is an attempt to define an absolute minimal proto while supporting
// login and all four forms of gRPC transmission while also making it easy
// to send/recieve custom arbitrary data (Blobs).

// 'Blob' is like a MIME block: it has a 'type', and an embedded binary 'msg'
// which can be anything but the anticipated pattern is: it is a binary dump
// of a protobuf message defined in some other proto file.  It is the
// responsibility of each custom app to pack/unpack its Blobs.
//
message Blob {
  uint32 type = 1;
  bytes msg = 2;
}

message LoginRequest {
  string user = 1;
  string password = 2;
  repeated Blob blobs = 3;
}

// 'secret' is a per-session token used to authenticate all future calls
// The Server will revoke the session secret at its liesure.  The Client
// can conclude its session is over when it recieves Output.success=false
// in a corresponding reply.
message Input {
  uint64 secret = 1;
  repeated Blob blobs = 2;
}

// When Output.success is 'false' then Input.secret has been revoked
// by the Server and the Client must start a new session.
message Output {
  bool success = 1;
  repeated Blob blobs = 2;
}

service DataService {
  rpc StartSession (LoginRequest) returns (Input) {}
  rpc PollInOut (Input) returns (Output) {}
  //rpc StreamIn (stream Input) returns (Output) {}
  //rpc StreamOut (Input) returns (stream Output) {}
  //rpc StreamInOut (stream Input) returns (stream Output) {}
}
